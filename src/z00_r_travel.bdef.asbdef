managed implementation in class zbp_00_r_travel unique;
strict ( 2 );

with draft;
extensible
{
  with additional save;
  with validations on save;
  with determinations on modify;
  with determinations on save;
}


define behavior for Z00_R_TRAVEL alias Travel
persistent table z00_travel ##UNMAPPED_FIELD
draft table z00_travel_d
with additional save
extensible
lock master total etag ChangedAt
authorization master ( instance )
etag master LocChangedAt // ChangedAt

early numbering
{
  create ( authorization : global );
  update ( features : instance );
  delete;

  event TravelCreated parameter Z00_A_EVENT;

  action ( features : instance ) cancel_travel result [0..1] $self;

  field ( readonly ) ChangedAt, LocChangedAt, ChangedBy, Status, Duration;

  field ( readonly ) AgencyId, TravelId;

  field ( mandatory ) Description, EndDate;
  field ( mandatory, features : instance ) CustomerId, BeginDate;

  association _TravelItem { create; with draft; }

  validation validateDescription on save
  { create;
    field Description;
  }

  validation validateCustomer on save
  { create;
    field CustomerId;
  }

  validation validateBeginDate on save
  { create;
    field BeginDate;
  }

  validation validateEndDate on save
  { create;
    field EndDate;
  }

  validation validateDateSequence on save
  { create;
    field BeginDate,
    EndDate;
  }

  determination determineStatus on modify { create; }

  determination determineDuration on save { field BeginDate, EndDate; }

  determine action checkCustomer
  {
    validation validateCustomer;
  }

  determine action adjustDuration
  {
    determination determineDuration;

    validation validateBeginDate;
    validation validateEndDate;
    validation validateDateSequence;
  }
  side effects
  {
    determine action adjustDuration
    executed on field BeginDate,
    field EndDate
    affects field Duration,
        messages;

  }

  draft action Edit;
  draft action Activate optimized;
  draft action Discard;
  draft action Resume;
  draft determine action Prepare extensible
  {
    validation validateDescription;
    validation validateCustomer;
    validation validateBeginDate;
    validation validateEndDate;
    validation validateDateSequence;

    validation Item~validateFlightDate;
  }


  mapping for z00_travel corresponding extensible
    {
      AgencyId     = agency_id;
      TravelId     = travel_id;
      BeginDate    = begin_date;
      EndDate      = end_date;
      ChangedAt    = changed_at;
      ChangedBy    = changed_by;
      CustomerId   = customer_id;
      LocChangedAt = loc_changed_at;
      //      Description = description;
      //      Status      = status;
    }
}

define behavior for Z00_R_TRAVELITEM alias Item
//persistent table z00_tritem
draft table z00_trit_d
with unmanaged save
extensible

authorization dependent by _Travel
lock dependent by _Travel
etag master LocChangedAt
{

  update;
  delete;

  association _Travel { with draft; }

  field ( readonly, numbering : managed )
  ItemUuid;

  field ( readonly )
  AgencyId,
  TravelId;

  validation validateFlightDate on save { create; field FlightDate; }
  determination determineTravelDates on save { field FlightDate; }

    mapping for /lrn/437_s_tritem ##unextensible_mapping
    control /lrn/437_s_tritemx corresponding  ##unextensible_mapping
    {
      ItemUuid           = item_uuid;
      AgencyId           = agency_id;
      TravelId           = travel_id;
      CarrierId          = carrier_id;
      ConnectionId       = connection_id;
      FlightDate         = flight_date;
      BookingId          = booking_id;
      PassengerFirstName = passenger_first_name;
      PassengerLastName  = passenger_last_name;
      ChangedAt          = changed_at;
      ChangedBy          = changed_by;
      LocChangedAt       = loc_changed_at;
    }


/*
  mapping for z00_tritem corresponding
    {
      ItemUuid           = item_uuid;
      AgencyId           = agency_id;
      TravelId           = travel_id;
      CarrierId          = carrier_id;
      ConnectionId       = connection_id;
      FlightDate         = flight_date;
      BookingId          = booking_id;
      PassengerFirstName = passenger_first_name;
      PassengerLastName  = passenger_last_name;
      ChangedAt          = changed_at;
      ChangedBy          = changed_by;
      LocChangedAt       = loc_changed_at;
    }
    */

}